%
% Copyright (c) 2013, Carnegie Mellon University.
% All rights reserved.
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions
% are met:
% 1. Redistributions of source code must retain the above copyright
%    notice, this list of conditions and the following disclaimer.
% 2. Redistributions in binary form must reproduce the above copyright
%    notice, this list of conditions and the following disclaimer in the
%    documentation and/or other materials provided with the distribution.
% 3. Neither the name of the University nor the names of its contributors
%    may be used to endorse or promote products derived from this software
%    without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
% ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
% LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
% A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
% HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
% INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
% BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
% OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
% AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
% LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
% WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.
%

%%
% Runs a chi^2 test to compare whether the counts in s0 (the expected
% counts) and those in s1 (the test counts) were generated by the same
% distribution.  Unlike compare_categories.m, this m-file groups the
% s0 counts and s1 counts by the name field.  So all bins with the same
% name are binned together into a single bin before the chi^2 test is
% applied.
%
% s0_counts_file: Counts of expected elements in each category 
% s1_counts_file: Counts of observed elements in each category
% sed_file: File of String-edit distances between caegories (NOT USED)
% output_file: File to which the result of the hyp. test should be written
% s0_cdf_file File to which CDF of category counts from s0 should sent
% s1_cdf_file: File to which CDF of category counts from s1 should be sent
%%
function [] = compare_high_level_type_counts(s0_counts_file, s1_counts_file, sed_file, output_file, stats_file, s0_cdf_file, s1_cdf_file)

if nargin ~= 7,
    error('Invalid number of arguments');
end

[s0_ids, s0_counts, names] = textread(s0_counts_file, '%d %d %s');
[s1_ids, s1_counts, names] = textread(s1_counts_file, '%d %d %s');

% Create a list of indices ot iterate over
idxs = 1:size(names, 1);
merged_bin_idx = 0;

% Iterate over the indices merging common elements
while(~isempty(idxs)),
    current_idx = idxs(1),
     merged_bin_idx = merged_bin_idx + 1;
       
    identical_idxs = find(strcmp(names(current_idx), names) == 1),
    
    s0_merged_counts(merged_bin_idx, 1) = 0;
    s1_merged_counts(merged_bin_idx, 1) = 0;
    merged_names(merged_bin_idx, 1) = names(current_idx, 1);
    
    for i = [identical_idxs]',
        s0_merged_counts(merged_bin_idx, 1) = s0_merged_counts(merged_bin_idx, 1) + s0_counts(i, 1);
        s1_merged_counts(merged_bin_idx, 1) = s1_merged_counts(merged_bin_idx, 1) + s1_counts(i, 1);
    end
    
    idxs = setdiff(idxs, identical_idxs);
 end

%%
% Run the hypothesis test
    chi_squared_stat = sum( (s1_merged_counts - s0_merged_counts).^2./(s0_merged_counts));
    p = 1 - chi2cdf(chi_squared_stat, size(s0_merged_counts, 1) - 1);
    h = 0;
    if (p < 0.05) 
        h = 1,
    end
        
    
    
    
    
